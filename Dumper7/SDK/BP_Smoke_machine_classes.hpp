#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Smoke_machine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Smoke_machine.BP_Smoke_machine_C
// 0x0080 (0x0350 - 0x02D0)
class ABP_Smoke_machine_C final : public ASBZStaticInteractionActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box_5;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_6;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_4;                                             // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_3;                                             // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_2;                                             // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_1;                                             // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USBZOutlineComponent*                   SBZOutline;                                        // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AK;                                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Smoke_Screen_C*>             Smoke_Screens;                                     // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FVector                                Tint;                                              // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roughness;                                         // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Activity_Duration;                                 // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Smoke_machine(int32 EntryPoint);
	void BndEvt__BP_Smoke_machine_Interactable_K2Node_ComponentBoundEvent_1_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void Deactivate_Smoke_Screens();
	void Stop_Smoke_Machine();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Smoke_machine_C">();
	}
	static class ABP_Smoke_machine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Smoke_machine_C>();
	}
};
static_assert(alignof(ABP_Smoke_machine_C) == 0x000008, "Wrong alignment on ABP_Smoke_machine_C");
static_assert(sizeof(ABP_Smoke_machine_C) == 0x000350, "Wrong size on ABP_Smoke_machine_C");
static_assert(offsetof(ABP_Smoke_machine_C, UberGraphFrame) == 0x0002D0, "Member 'ABP_Smoke_machine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box_5) == 0x0002D8, "Member 'ABP_Smoke_machine_C::Box_5' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box_6) == 0x0002E0, "Member 'ABP_Smoke_machine_C::Box_6' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box) == 0x0002E8, "Member 'ABP_Smoke_machine_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box_4) == 0x0002F0, "Member 'ABP_Smoke_machine_C::Box_4' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box_3) == 0x0002F8, "Member 'ABP_Smoke_machine_C::Box_3' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box_2) == 0x000300, "Member 'ABP_Smoke_machine_C::Box_2' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Box_1) == 0x000308, "Member 'ABP_Smoke_machine_C::Box_1' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, SBZOutline) == 0x000310, "Member 'ABP_Smoke_machine_C::SBZOutline' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, AK) == 0x000318, "Member 'ABP_Smoke_machine_C::AK' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, StaticMesh) == 0x000320, "Member 'ABP_Smoke_machine_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Smoke_Screens) == 0x000328, "Member 'ABP_Smoke_machine_C::Smoke_Screens' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Tint) == 0x000338, "Member 'ABP_Smoke_machine_C::Tint' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Roughness) == 0x000344, "Member 'ABP_Smoke_machine_C::Roughness' has a wrong offset!");
static_assert(offsetof(ABP_Smoke_machine_C, Activity_Duration) == 0x000348, "Member 'ABP_Smoke_machine_C::Activity_Duration' has a wrong offset!");

}

