#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DisplayScreen_01_Ad_SCR

#include "Basic.hpp"

#include "bp_screen_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DisplayScreen_01_Ad_SCR.BP_DisplayScreen_01_Ad_SCR_C
// 0x0030 (0x0360 - 0x0330)
class ABP_DisplayScreen_01_Ad_SCR_C final : public Abp_screen_C
{
public:
	class UStaticMeshComponent*                   InfoStand_CastLight2;                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InfoStand_CastLight1;                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Light_00;                                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use_Light_01;                                      // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342[0x2];                                      // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale_X;                                           // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Y;                                           // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Z;                                           // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Atlas;                                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mat_Display;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DisplayScreen_01_Ad_SCR_C">();
	}
	static class ABP_DisplayScreen_01_Ad_SCR_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DisplayScreen_01_Ad_SCR_C>();
	}
};
static_assert(alignof(ABP_DisplayScreen_01_Ad_SCR_C) == 0x000008, "Wrong alignment on ABP_DisplayScreen_01_Ad_SCR_C");
static_assert(sizeof(ABP_DisplayScreen_01_Ad_SCR_C) == 0x000360, "Wrong size on ABP_DisplayScreen_01_Ad_SCR_C");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, InfoStand_CastLight2) == 0x000330, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::InfoStand_CastLight2' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, InfoStand_CastLight1) == 0x000338, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::InfoStand_CastLight1' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Use_Light_00) == 0x000340, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Use_Light_00' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Use_Light_01) == 0x000341, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Use_Light_01' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Scale_X) == 0x000344, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Scale_X' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Scale_Y) == 0x000348, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Scale_Y' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Scale_Z) == 0x00034C, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Scale_Z' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Atlas) == 0x000350, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Atlas' has a wrong offset!");
static_assert(offsetof(ABP_DisplayScreen_01_Ad_SCR_C, Mat_Display) == 0x000358, "Member 'ABP_DisplayScreen_01_Ad_SCR_C::Mat_Display' has a wrong offset!");

}

