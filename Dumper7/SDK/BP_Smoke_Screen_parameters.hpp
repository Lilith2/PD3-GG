#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Smoke_Screen

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_Smoke_Screen.BP_Smoke_Screen_C.ExecuteUbergraph_BP_Smoke_Screen
// 0x0008 (0x0008 - 0x0000)
struct BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSetActive;                           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDoCosmetics;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen) == 0x000004, "Wrong alignment on BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen");
static_assert(sizeof(BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen) == 0x000008, "Wrong size on BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen");
static_assert(offsetof(BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen, EntryPoint) == 0x000000, "Member 'BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen, K2Node_Event_bSetActive) == 0x000004, "Member 'BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen::K2Node_Event_bSetActive' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen, K2Node_Event_bDoCosmetics) == 0x000005, "Member 'BP_Smoke_Screen_C_ExecuteUbergraph_BP_Smoke_Screen::K2Node_Event_bDoCosmetics' has a wrong offset!");

// Function BP_Smoke_Screen.BP_Smoke_Screen_C.OnActiveStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_Smoke_Screen_C_OnActiveStateChanged final
{
public:
	bool                                          bSetActive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDoCosmetics;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Smoke_Screen_C_OnActiveStateChanged) == 0x000001, "Wrong alignment on BP_Smoke_Screen_C_OnActiveStateChanged");
static_assert(sizeof(BP_Smoke_Screen_C_OnActiveStateChanged) == 0x000002, "Wrong size on BP_Smoke_Screen_C_OnActiveStateChanged");
static_assert(offsetof(BP_Smoke_Screen_C_OnActiveStateChanged, bSetActive) == 0x000000, "Member 'BP_Smoke_Screen_C_OnActiveStateChanged::bSetActive' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_OnActiveStateChanged, bDoCosmetics) == 0x000001, "Member 'BP_Smoke_Screen_C_OnActiveStateChanged::bDoCosmetics' has a wrong offset!");

// Function BP_Smoke_Screen.BP_Smoke_Screen_C.Stop_Sound
// 0x0028 (0x0028 - 0x0000)
struct BP_Smoke_Screen_C_Stop_Sound final
{
public:
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0010(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Smoke_Screen_C_Stop_Sound) == 0x000008, "Wrong alignment on BP_Smoke_Screen_C_Stop_Sound");
static_assert(sizeof(BP_Smoke_Screen_C_Stop_Sound) == 0x000028, "Wrong size on BP_Smoke_Screen_C_Stop_Sound");
static_assert(offsetof(BP_Smoke_Screen_C_Stop_Sound, Temp_struct_Variable) == 0x000000, "Member 'BP_Smoke_Screen_C_Stop_Sound::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_Stop_Sound, Temp_delegate_Variable) == 0x000010, "Member 'BP_Smoke_Screen_C_Stop_Sound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_Stop_Sound, CallFunc_PostAkEvent_ReturnValue) == 0x000024, "Member 'BP_Smoke_Screen_C_Stop_Sound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_Smoke_Screen.BP_Smoke_Screen_C.Play_Sound
// 0x0028 (0x0028 - 0x0000)
struct BP_Smoke_Screen_C_Play_Sound final
{
public:
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0010(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Smoke_Screen_C_Play_Sound) == 0x000008, "Wrong alignment on BP_Smoke_Screen_C_Play_Sound");
static_assert(sizeof(BP_Smoke_Screen_C_Play_Sound) == 0x000028, "Wrong size on BP_Smoke_Screen_C_Play_Sound");
static_assert(offsetof(BP_Smoke_Screen_C_Play_Sound, Temp_struct_Variable) == 0x000000, "Member 'BP_Smoke_Screen_C_Play_Sound::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_Play_Sound, Temp_delegate_Variable) == 0x000010, "Member 'BP_Smoke_Screen_C_Play_Sound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Smoke_Screen_C_Play_Sound, CallFunc_PostAkEvent_ReturnValue) == 0x000024, "Member 'BP_Smoke_Screen_C_Play_Sound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

}

