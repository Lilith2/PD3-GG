#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UI_Widget_SegmentedAttributeBar

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_UI_Widget_SegmentedAttributeBar.WBP_UI_Widget_SegmentedAttributeBar_C
// 0x0090 (0x0478 - 0x03E8)
class UWBP_UI_Widget_SegmentedAttributeBar_C final : public UPD3SegmentedPercentWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Flash;                                             // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Shader;                                            // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         MaxAttribute;                                      // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBuilt;                                           // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentPercent;                                    // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundColor;                                   // 0x041C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainColor;                                         // 0x042C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LaggingColor;                                      // 0x043C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickThickness;                                     // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickUpLimit;                                       // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickDownLimit;                                     // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialInst;                                      // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraumaColor;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TestProgress;                                      // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsVisibilityUpdated;                              // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZArmorChunkType                            TempOneColorChunktype;                             // 0x0475(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnBuilt__DelegateSignature();
	void ExecuteUbergraph_WBP_UI_Widget_SegmentedAttributeBar(int32 EntryPoint);
	void OnArmorChunkTypeArrayChanged();
	void OnInitialized();
	void OnTraumaRatioChanged(float StartOffset, float EndOffset);
	void OnSetup(float CurrentValueSetup, float MaxValueSetup, float PercentageSetup);
	void PreConstruct(bool IsDesignTime);
	void BuildChunks();
	void OnMaxAttributeUpdate(float NewValue, float OldPercentage, float NewPercentage);
	void OnCurrentAttributeUpdate(float NewValue, float OldPercentage, float NewPercentage);
	void SetShaderParams();
	void SetShaderProgress(float Progress);
	void Set_Flashing(bool bIsFlashing);
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_UI_Widget_SegmentedAttributeBar_C">();
	}
	static class UWBP_UI_Widget_SegmentedAttributeBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_UI_Widget_SegmentedAttributeBar_C>();
	}
};
static_assert(alignof(UWBP_UI_Widget_SegmentedAttributeBar_C) == 0x000008, "Wrong alignment on UWBP_UI_Widget_SegmentedAttributeBar_C");
static_assert(sizeof(UWBP_UI_Widget_SegmentedAttributeBar_C) == 0x000478, "Wrong size on UWBP_UI_Widget_SegmentedAttributeBar_C");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, UberGraphFrame) == 0x0003E8, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, Flash) == 0x0003F0, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::Flash' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, Shader) == 0x0003F8, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::Shader' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, MaxAttribute) == 0x000400, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::MaxAttribute' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, OnBuilt) == 0x000408, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::OnBuilt' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, CurrentPercent) == 0x000418, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::CurrentPercent' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, BackgroundColor) == 0x00041C, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, MainColor) == 0x00042C, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::MainColor' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, LaggingColor) == 0x00043C, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::LaggingColor' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, TickThickness) == 0x00044C, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::TickThickness' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, TickUpLimit) == 0x000450, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::TickUpLimit' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, TickDownLimit) == 0x000454, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::TickDownLimit' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, MaterialInst) == 0x000458, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::MaterialInst' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, TraumaColor) == 0x000460, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::TraumaColor' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, TestProgress) == 0x000470, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::TestProgress' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, bIsVisibilityUpdated) == 0x000474, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::bIsVisibilityUpdated' has a wrong offset!");
static_assert(offsetof(UWBP_UI_Widget_SegmentedAttributeBar_C, TempOneColorChunktype) == 0x000475, "Member 'UWBP_UI_Widget_SegmentedAttributeBar_C::TempOneColorChunktype' has a wrong offset!");

}

