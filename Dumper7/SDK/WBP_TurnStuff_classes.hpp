#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TurnStuff

#include "Basic.hpp"

#include "Threex3_All_Hacking_Minigames_Struct_structs.hpp"
#include "Engine_structs.hpp"
#include "Twox2_Minigame_Structs_structs.hpp"
#include "Threex3_Turn_Puzzle_Struct_structs.hpp"
#include "Fourx4_All_Hacking_Minigames_Struct_structs.hpp"
#include "Starbreeze_structs.hpp"
#include "Starbreeze_classes.hpp"
#include "Fourx4_minigame_Struct_structs.hpp"
#include "Twox2_All_Hacking_minigames_Struct_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_TurnStuff.WBP_TurnStuff_C
// 0x07E0 (0x0AA0 - 0x02C0)
class UWBP_TurnStuff_C final : public UPD3MiniGameWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SkillLine;                                         // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PortSwitch;                                        // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NewAnimation;                                      // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Blink;                                             // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NewLevel;                                          // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             CoolDownTimer;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Cur;                                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_5;                                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_7;                                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_8;                                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                MarkerBorder_1;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             MinigamePlayArea;                                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             PortSwitchTimer;                                   // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress1;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress2;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress3;                                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress4;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Progress5;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_130;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBarTimer;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ProgressBox;                                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ProgressLost;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Shutdown;                                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SwitchingPOrt;                                     // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_2;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_1228;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           TIMER;                                             // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TotNum;                                            // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Wait_1;                                            // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UButton*>                        Button_Array;                                      // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<float, float>                            End_Start_Map;                                     // 0x03C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         GridIndex;                                         // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Match;                                             // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastIndex;                                         // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Start_at_Time;                                     // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End_at_Time;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndAngle;                                          // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotating;                                          // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Complete;                                          // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CountdownTimer;                                    // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FThreex3_All_Hacking_Minigames_Struct  AllMinigames_3x3;                                  // 0x0430(0x01E0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FThreex3_Turn_Puzzle_Struct>    Threex3_Struct_Array;                              // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CoolDownBlocker;                                   // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_621[0x3];                                      // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBeforeSwitch;                                  // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCooldown;                                      // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundCompleteAddition;                             // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CountdownLockOut;                                  // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RandomArrayInt;                                    // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         New;                                               // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Old;                                               // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current;                                           // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         ProgressChunks;                                    // 0x0658(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWidgetAnimation*>               ClockArray;                                        // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UGridSlot*>                      GridRefs;                                          // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWidgetPanel_C*>                 Widget_ref;                                        // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Length_X_Length;                                   // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFourx4_All_Hacking_Minigames_Struct   AllMinigames_4x4;                                  // 0x06A0(0x01E0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FFourx4_minigame_Struct>        Fourx4_Struct_Array;                               // 0x0880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UGridSlot*                              NewVar_0;                                          // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberOfLevelsInHack;                              // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89C[0x4];                                      // 0x089C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFourx4_minigame_Struct>        Temp4x4;                                           // 0x08A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FThreex3_Turn_Puzzle_Struct>    Temp3x3;                                           // 0x08B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         NewVar_1;                                          // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RandomNumPickArray;                                // 0x08C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NewVar_2;                                          // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTwox2_All_Hacking_minigames_Struct    AllMinigames_2x2;                                  // 0x08E0(0x0120)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTwox2_Minigame_Structs>        Twox2StructArray;                                  // 0x0A00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 InteractedNums;                                    // 0x0A10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         OldGridIndex;                                      // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A24[0x4];                                      // 0x0A24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, bool>                             NewVar_3;                                          // 0x0A28(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Last_Index;                                        // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7C[0x4];                                      // 0x0A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     Result;                                            // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoopIndex;                                         // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimerSkill;                                        // 0x0A8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A8D[0x3];                                      // 0x0A8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle1;                                      // 0x0A90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak_Component;                                      // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_TurnStuff(int32 EntryPoint);
	void OnMiniGameWidgetPlaced(class UAkComponent* AkComponent);
	void BP_OnXAxisChanged(float Value);
	void BP_OnYAxisChanged(float Value);
	void Index_Interacted();
	void MiniGameStateChanged(EPD3MiniGameState NewState);
	void OnMiniGameDifficulty(ESBZDifficulty HeistDifficulty, uint8 MiniGameDifficulty);
	void Resume();
	void CounterRot();
	void PreConstruct(bool IsDesignTime);
	void ClockRot();
	void CoolDown();
	void TimerCount();
	void Play_Blink();
	void Finished_167BD88B4F667EA7028D92A5B7AB9CE6();
	void Finished_526358C4467BB346D6980EAA6A34A585();
	void Finished_5108EE7E40DB4963C7EA10BF93F95D06();
	void Finished_915C53CC435C34C1E3A47F97F6282F27();
	void Finished_384C34FC4D12BC46D82645B58C23D4A3();
	void W();
	void S();
	void A();
	void D();
	void SetArrays();
	void CalcAnim(class UWidget* Self2, bool* NewParam);
	void SetBoard(TArray<float>& Start, TArray<float>& End, TArray<class UTexture*>& Images);
	void CheckCorrect(TArray<float>& Array);
	void SetMarker();
	void Func_0(const class FString& StopFunction, const class FString& StartFunction);
	void NewRound();
	void ReverseAnim(class UWidget* Self2);
	void SetBoardSize();
	void Set_Random_3x3(const TArray<struct FThreex3_Turn_Puzzle_Struct>& TargetArray);
	void Set_Random_4x4(const TArray<struct FFourx4_minigame_Struct>& TargetArray);
	void SetLevelsInHack();
	void SetDifficulty(uint8 Minigame_Dif, ESBZDifficulty Heist_Dif);
	void NewFunction_1(const TArray<struct FTwox2_Minigame_Structs>& TargetArray);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_TurnStuff_C">();
	}
	static class UWBP_TurnStuff_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_TurnStuff_C>();
	}
};
static_assert(alignof(UWBP_TurnStuff_C) == 0x000008, "Wrong alignment on UWBP_TurnStuff_C");
static_assert(sizeof(UWBP_TurnStuff_C) == 0x000AA0, "Wrong size on UWBP_TurnStuff_C");
static_assert(offsetof(UWBP_TurnStuff_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_TurnStuff_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, SkillLine) == 0x0002C8, "Member 'UWBP_TurnStuff_C::SkillLine' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, PortSwitch) == 0x0002D0, "Member 'UWBP_TurnStuff_C::PortSwitch' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NewAnimation) == 0x0002D8, "Member 'UWBP_TurnStuff_C::NewAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Blink) == 0x0002E0, "Member 'UWBP_TurnStuff_C::Blink' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NewLevel) == 0x0002E8, "Member 'UWBP_TurnStuff_C::NewLevel' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, CoolDownTimer) == 0x0002F0, "Member 'UWBP_TurnStuff_C::CoolDownTimer' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Cur) == 0x0002F8, "Member 'UWBP_TurnStuff_C::Cur' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Image_5) == 0x000300, "Member 'UWBP_TurnStuff_C::Image_5' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Image_7) == 0x000308, "Member 'UWBP_TurnStuff_C::Image_7' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Image_8) == 0x000310, "Member 'UWBP_TurnStuff_C::Image_8' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, MarkerBorder_1) == 0x000318, "Member 'UWBP_TurnStuff_C::MarkerBorder_1' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, MinigamePlayArea) == 0x000320, "Member 'UWBP_TurnStuff_C::MinigamePlayArea' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, PortSwitchTimer) == 0x000328, "Member 'UWBP_TurnStuff_C::PortSwitchTimer' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Progress1) == 0x000330, "Member 'UWBP_TurnStuff_C::Progress1' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Progress2) == 0x000338, "Member 'UWBP_TurnStuff_C::Progress2' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Progress3) == 0x000340, "Member 'UWBP_TurnStuff_C::Progress3' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Progress4) == 0x000348, "Member 'UWBP_TurnStuff_C::Progress4' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Progress5) == 0x000350, "Member 'UWBP_TurnStuff_C::Progress5' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, ProgressBar_130) == 0x000358, "Member 'UWBP_TurnStuff_C::ProgressBar_130' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, ProgressBarTimer) == 0x000360, "Member 'UWBP_TurnStuff_C::ProgressBarTimer' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, ProgressBox) == 0x000368, "Member 'UWBP_TurnStuff_C::ProgressBox' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, ProgressLost) == 0x000370, "Member 'UWBP_TurnStuff_C::ProgressLost' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Shutdown) == 0x000378, "Member 'UWBP_TurnStuff_C::Shutdown' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, SwitchingPOrt) == 0x000380, "Member 'UWBP_TurnStuff_C::SwitchingPOrt' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TextBlock_2) == 0x000388, "Member 'UWBP_TurnStuff_C::TextBlock_2' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TextBlock_1228) == 0x000390, "Member 'UWBP_TurnStuff_C::TextBlock_1228' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TIMER) == 0x000398, "Member 'UWBP_TurnStuff_C::TIMER' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TotNum) == 0x0003A0, "Member 'UWBP_TurnStuff_C::TotNum' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Wait_1) == 0x0003A8, "Member 'UWBP_TurnStuff_C::Wait_1' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Button_Array) == 0x0003B0, "Member 'UWBP_TurnStuff_C::Button_Array' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, End_Start_Map) == 0x0003C0, "Member 'UWBP_TurnStuff_C::End_Start_Map' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, GridIndex) == 0x000410, "Member 'UWBP_TurnStuff_C::GridIndex' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Match) == 0x000414, "Member 'UWBP_TurnStuff_C::Match' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, LastIndex) == 0x000418, "Member 'UWBP_TurnStuff_C::LastIndex' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Start_at_Time) == 0x00041C, "Member 'UWBP_TurnStuff_C::Start_at_Time' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, End_at_Time) == 0x000420, "Member 'UWBP_TurnStuff_C::End_at_Time' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, EndAngle) == 0x000424, "Member 'UWBP_TurnStuff_C::EndAngle' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Rotating) == 0x000428, "Member 'UWBP_TurnStuff_C::Rotating' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Complete) == 0x000429, "Member 'UWBP_TurnStuff_C::Complete' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, CountdownTimer) == 0x00042C, "Member 'UWBP_TurnStuff_C::CountdownTimer' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, AllMinigames_3x3) == 0x000430, "Member 'UWBP_TurnStuff_C::AllMinigames_3x3' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Threex3_Struct_Array) == 0x000610, "Member 'UWBP_TurnStuff_C::Threex3_Struct_Array' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, CoolDownBlocker) == 0x000620, "Member 'UWBP_TurnStuff_C::CoolDownBlocker' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TimeBeforeSwitch) == 0x000624, "Member 'UWBP_TurnStuff_C::TimeBeforeSwitch' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TimeCooldown) == 0x000628, "Member 'UWBP_TurnStuff_C::TimeCooldown' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, RoundCompleteAddition) == 0x00062C, "Member 'UWBP_TurnStuff_C::RoundCompleteAddition' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, CountdownLockOut) == 0x000630, "Member 'UWBP_TurnStuff_C::CountdownLockOut' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, RandomArrayInt) == 0x000638, "Member 'UWBP_TurnStuff_C::RandomArrayInt' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, New) == 0x000648, "Member 'UWBP_TurnStuff_C::New' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Old) == 0x00064C, "Member 'UWBP_TurnStuff_C::Old' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Current) == 0x000650, "Member 'UWBP_TurnStuff_C::Current' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, ProgressChunks) == 0x000658, "Member 'UWBP_TurnStuff_C::ProgressChunks' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, ClockArray) == 0x000668, "Member 'UWBP_TurnStuff_C::ClockArray' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, GridRefs) == 0x000678, "Member 'UWBP_TurnStuff_C::GridRefs' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Widget_ref) == 0x000688, "Member 'UWBP_TurnStuff_C::Widget_ref' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Length_X_Length) == 0x000698, "Member 'UWBP_TurnStuff_C::Length_X_Length' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, AllMinigames_4x4) == 0x0006A0, "Member 'UWBP_TurnStuff_C::AllMinigames_4x4' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Fourx4_Struct_Array) == 0x000880, "Member 'UWBP_TurnStuff_C::Fourx4_Struct_Array' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NewVar_0) == 0x000890, "Member 'UWBP_TurnStuff_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NumberOfLevelsInHack) == 0x000898, "Member 'UWBP_TurnStuff_C::NumberOfLevelsInHack' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Temp4x4) == 0x0008A0, "Member 'UWBP_TurnStuff_C::Temp4x4' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Temp3x3) == 0x0008B0, "Member 'UWBP_TurnStuff_C::Temp3x3' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NewVar_1) == 0x0008C0, "Member 'UWBP_TurnStuff_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, RandomNumPickArray) == 0x0008C8, "Member 'UWBP_TurnStuff_C::RandomNumPickArray' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NewVar_2) == 0x0008D8, "Member 'UWBP_TurnStuff_C::NewVar_2' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, AllMinigames_2x2) == 0x0008E0, "Member 'UWBP_TurnStuff_C::AllMinigames_2x2' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Twox2StructArray) == 0x000A00, "Member 'UWBP_TurnStuff_C::Twox2StructArray' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, InteractedNums) == 0x000A10, "Member 'UWBP_TurnStuff_C::InteractedNums' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, OldGridIndex) == 0x000A20, "Member 'UWBP_TurnStuff_C::OldGridIndex' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, NewVar_3) == 0x000A28, "Member 'UWBP_TurnStuff_C::NewVar_3' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Last_Index) == 0x000A78, "Member 'UWBP_TurnStuff_C::Last_Index' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Result) == 0x000A80, "Member 'UWBP_TurnStuff_C::Result' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, LoopIndex) == 0x000A88, "Member 'UWBP_TurnStuff_C::LoopIndex' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TimerSkill) == 0x000A8C, "Member 'UWBP_TurnStuff_C::TimerSkill' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, TimerHandle1) == 0x000A90, "Member 'UWBP_TurnStuff_C::TimerHandle1' has a wrong offset!");
static_assert(offsetof(UWBP_TurnStuff_C, Ak_Component) == 0x000A98, "Member 'UWBP_TurnStuff_C::Ak_Component' has a wrong offset!");

}

