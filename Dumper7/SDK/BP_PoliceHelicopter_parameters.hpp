#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PoliceHelicopter

#include "Basic.hpp"

#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function BP_PoliceHelicopter.BP_PoliceHelicopter_C.ExecuteUbergraph_BP_PoliceHelicopter
// 0x0060 (0x0060 - 0x0000)
struct BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class APD3PawnSpawnGroup* SpawnGroup, class ASBZPawnSpawnBase* Spawner, class APawn* Pawn)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0014)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APD3PawnSpawnGroup*                     K2Node_CustomEvent_SpawnGroup;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASBZPawnSpawnBase*                      K2Node_CustomEvent_Spawner;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Pawn;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APD3PawnSpawnGroup*                     K2Node_DynamicCast_AsPD3Pawn_Spawn_Group;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESBZAerialVehicleDoor                         K2Node_Event_Door;                                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsDoorOpen;                          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Helicopter_C*                      K2Node_DynamicCast_AsABP_Helicopter;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter) == 0x000008, "Wrong alignment on BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter");
static_assert(sizeof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter) == 0x000060, "Wrong size on BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, EntryPoint) == 0x000000, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_CustomEvent_SpawnGroup) == 0x000020, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_CustomEvent_SpawnGroup' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_CustomEvent_Spawner) == 0x000028, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_CustomEvent_Spawner' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_CustomEvent_Pawn) == 0x000030, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_CustomEvent_Pawn' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_DynamicCast_AsPD3Pawn_Spawn_Group) == 0x000038, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_DynamicCast_AsPD3Pawn_Spawn_Group' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_Event_Door) == 0x000041, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_Event_Door' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_Event_bIsDoorOpen) == 0x000042, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_Event_bIsDoorOpen' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, CallFunc_GetAnimInstance_ReturnValue) == 0x000048, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_DynamicCast_AsABP_Helicopter) == 0x000050, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_DynamicCast_AsABP_Helicopter' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_PoliceHelicopter_C_ExecuteUbergraph_BP_PoliceHelicopter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_PoliceHelicopter.BP_PoliceHelicopter_C.ReceiveOnDoorStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged final
{
public:
	ESBZAerialVehicleDoor                         Door;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDoorOpen;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged) == 0x000001, "Wrong alignment on BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged");
static_assert(sizeof(BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged) == 0x000002, "Wrong size on BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged");
static_assert(offsetof(BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged, Door) == 0x000000, "Member 'BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged::Door' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged, bIsDoorOpen) == 0x000001, "Member 'BP_PoliceHelicopter_C_ReceiveOnDoorStateChanged::bIsDoorOpen' has a wrong offset!");

// Function BP_PoliceHelicopter.BP_PoliceHelicopter_C.OnPawnSpawned
// 0x0018 (0x0018 - 0x0000)
struct BP_PoliceHelicopter_C_OnPawnSpawned final
{
public:
	class APD3PawnSpawnGroup*                     SpawnGroup;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASBZPawnSpawnBase*                      Spawner;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Pawn;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PoliceHelicopter_C_OnPawnSpawned) == 0x000008, "Wrong alignment on BP_PoliceHelicopter_C_OnPawnSpawned");
static_assert(sizeof(BP_PoliceHelicopter_C_OnPawnSpawned) == 0x000018, "Wrong size on BP_PoliceHelicopter_C_OnPawnSpawned");
static_assert(offsetof(BP_PoliceHelicopter_C_OnPawnSpawned, SpawnGroup) == 0x000000, "Member 'BP_PoliceHelicopter_C_OnPawnSpawned::SpawnGroup' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_OnPawnSpawned, Spawner) == 0x000008, "Member 'BP_PoliceHelicopter_C_OnPawnSpawned::Spawner' has a wrong offset!");
static_assert(offsetof(BP_PoliceHelicopter_C_OnPawnSpawned, Pawn) == 0x000010, "Member 'BP_PoliceHelicopter_C_OnPawnSpawned::Pawn' has a wrong offset!");

}

