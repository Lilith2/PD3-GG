#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Blinder_Controller

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Starbreeze_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Blinder_Controller.BP_Blinder_Controller_C
// 0x0030 (0x0300 - 0x02D0)
class ABP_Blinder_Controller_C final : public ASBZStaticInteractionActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USBZOutlineComponent*                   SBZOutline;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ReplicatedBinaryActor_windows_blinder_C*> Controlled_Blinders;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsEnabled;                                         // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Blinder_Controller(int32 EntryPoint);
	void BndEvt__BP_Blinder_Controller_Interactable_K2Node_ComponentBoundEvent_0_SBZOnInteraction__DelegateSignature(class USBZBaseInteractableComponent* Interactable_0, class USBZInteractorComponent* Interactor, bool bIsLocallyControlledInteractor);
	void UserConstructionScript();
	void SetEnabled(bool Enabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Blinder_Controller_C">();
	}
	static class ABP_Blinder_Controller_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Blinder_Controller_C>();
	}
};
static_assert(alignof(ABP_Blinder_Controller_C) == 0x000008, "Wrong alignment on ABP_Blinder_Controller_C");
static_assert(sizeof(ABP_Blinder_Controller_C) == 0x000300, "Wrong size on ABP_Blinder_Controller_C");
static_assert(offsetof(ABP_Blinder_Controller_C, UberGraphFrame) == 0x0002D0, "Member 'ABP_Blinder_Controller_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Blinder_Controller_C, SBZOutline) == 0x0002D8, "Member 'ABP_Blinder_Controller_C::SBZOutline' has a wrong offset!");
static_assert(offsetof(ABP_Blinder_Controller_C, StaticMesh) == 0x0002E0, "Member 'ABP_Blinder_Controller_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Blinder_Controller_C, Controlled_Blinders) == 0x0002E8, "Member 'ABP_Blinder_Controller_C::Controlled_Blinders' has a wrong offset!");
static_assert(offsetof(ABP_Blinder_Controller_C, IsEnabled) == 0x0002F8, "Member 'ABP_Blinder_Controller_C::IsEnabled' has a wrong offset!");

}

