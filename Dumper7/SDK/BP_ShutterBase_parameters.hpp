#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShutterBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Starbreeze_structs.hpp"


namespace SDK::Params
{

// Function BP_ShutterBase.BP_ShutterBase_C.ExecuteUbergraph_BP_ShutterBase
// 0x0038 (0x0038 - 0x0000)
struct BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bStateToChangeTo;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bDoCosmetics;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x000C(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimelineLength_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase) == 0x000008, "Wrong alignment on BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase");
static_assert(sizeof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase) == 0x000038, "Wrong size on BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, EntryPoint) == 0x000000, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, K2Node_Event_bStateToChangeTo) == 0x000008, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::K2Node_Event_bStateToChangeTo' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, K2Node_Event_bDoCosmetics) == 0x000009, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::K2Node_Event_bDoCosmetics' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000A, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, Temp_delegate_Variable) == 0x00000C, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, Temp_struct_Variable) == 0x000020, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, CallFunc_PostEvent_ReturnValue) == 0x000030, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase, CallFunc_GetTimelineLength_ReturnValue) == 0x000034, "Member 'BP_ShutterBase_C_ExecuteUbergraph_BP_ShutterBase::CallFunc_GetTimelineLength_ReturnValue' has a wrong offset!");

// Function BP_ShutterBase.BP_ShutterBase_C.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_ShutterBase_C_OnStateChanged final
{
public:
	bool                                          bStateToChangeTo;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDoCosmetics;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShutterBase_C_OnStateChanged) == 0x000001, "Wrong alignment on BP_ShutterBase_C_OnStateChanged");
static_assert(sizeof(BP_ShutterBase_C_OnStateChanged) == 0x000002, "Wrong size on BP_ShutterBase_C_OnStateChanged");
static_assert(offsetof(BP_ShutterBase_C_OnStateChanged, bStateToChangeTo) == 0x000000, "Member 'BP_ShutterBase_C_OnStateChanged::bStateToChangeTo' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_OnStateChanged, bDoCosmetics) == 0x000001, "Member 'BP_ShutterBase_C_OnStateChanged::bDoCosmetics' has a wrong offset!");

// Function BP_ShutterBase.BP_ShutterBase_C.UserConstructionScript
// 0x0004 (0x0004 - 0x0000)
struct BP_ShutterBase_C_UserConstructionScript final
{
public:
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShutterBase_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_ShutterBase_C_UserConstructionScript");
static_assert(sizeof(BP_ShutterBase_C_UserConstructionScript) == 0x000004, "Wrong size on BP_ShutterBase_C_UserConstructionScript");
static_assert(offsetof(BP_ShutterBase_C_UserConstructionScript, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000000, "Member 'BP_ShutterBase_C_UserConstructionScript::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");

// Function BP_ShutterBase.BP_ShutterBase_C.SetStateFunction
// 0x0003 (0x0003 - 0x0000)
struct BP_ShutterBase_C_SetStateFunction final
{
public:
	ESBZVehicleDoorState                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimateOpening;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShutterBase_C_SetStateFunction) == 0x000001, "Wrong alignment on BP_ShutterBase_C_SetStateFunction");
static_assert(sizeof(BP_ShutterBase_C_SetStateFunction) == 0x000003, "Wrong size on BP_ShutterBase_C_SetStateFunction");
static_assert(offsetof(BP_ShutterBase_C_SetStateFunction, State) == 0x000000, "Member 'BP_ShutterBase_C_SetStateFunction::State' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetStateFunction, AnimateOpening) == 0x000001, "Member 'BP_ShutterBase_C_SetStateFunction::AnimateOpening' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetStateFunction, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_ShutterBase_C_SetStateFunction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_ShutterBase.BP_ShutterBase_C.setShutterCollision
// 0x0030 (0x0030 - 0x0000)
struct BP_ShutterBase_C_SetShutterCollision final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               Temp_class_Variable;                               // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UNavAreaBase>               Temp_class_Variable_1;                             // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               K2Node_Select_Default;                             // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default_1;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShutterBase_C_SetShutterCollision) == 0x000008, "Wrong alignment on BP_ShutterBase_C_SetShutterCollision");
static_assert(sizeof(BP_ShutterBase_C_SetShutterCollision) == 0x000030, "Wrong size on BP_ShutterBase_C_SetShutterCollision");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Open) == 0x000000, "Member 'BP_ShutterBase_C_SetShutterCollision::Open' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Temp_byte_Variable) == 0x000001, "Member 'BP_ShutterBase_C_SetShutterCollision::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Temp_byte_Variable_1) == 0x000002, "Member 'BP_ShutterBase_C_SetShutterCollision::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Temp_bool_Variable) == 0x000003, "Member 'BP_ShutterBase_C_SetShutterCollision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Temp_class_Variable) == 0x000008, "Member 'BP_ShutterBase_C_SetShutterCollision::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Temp_class_Variable_1) == 0x000010, "Member 'BP_ShutterBase_C_SetShutterCollision::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, Temp_bool_Variable_1) == 0x000018, "Member 'BP_ShutterBase_C_SetShutterCollision::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, K2Node_Select_Default) == 0x000020, "Member 'BP_ShutterBase_C_SetShutterCollision::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ShutterBase_C_SetShutterCollision, K2Node_Select_Default_1) == 0x000028, "Member 'BP_ShutterBase_C_SetShutterCollision::K2Node_Select_Default_1' has a wrong offset!");

}

