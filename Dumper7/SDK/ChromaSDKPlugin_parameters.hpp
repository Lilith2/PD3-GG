#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChromaSDKPlugin

#include "Basic.hpp"

#include "ChromaSDKPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeys final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeys::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeys::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys, FrameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeys::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName, FrameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AppendAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_AppendAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AppendAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AppendAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AppendAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_AppendAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AppendAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AppendAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AppendAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_AppendAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AppendAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AppendAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AppendAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_AppendAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AppendAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AppendAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectCustom1D
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0018(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectCustom2D
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0018(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectKeyboardCustom2D
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D final
{
public:
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D, Colors) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectNone
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectStatic
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic::ColorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic, ReturnValue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKDeleteEffect
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect final
{
public:
	struct FChromaSDKGuid                         EffectId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect, EffectId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect::EffectId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKInit
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKInit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKInit) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKInit");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKInit) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKInit");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKInit, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKInit::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKInitSDK
// 0x0050 (0x0050 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKInitSDK final
{
public:
	struct FChromaSDKAppInfoType                  AppInfo;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKInitSDK) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKInitSDK");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKInitSDK) == 0x000050, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKInitSDK");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKInitSDK, AppInfo) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKInitSDK::AppInfo' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKInitSDK, ReturnValue) == 0x000048, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKInitSDK::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKSetEffect
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKSetEffect final
{
public:
	struct FChromaSDKGuid                         EffectId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKSetEffect");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKSetEffect");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect, EffectId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKSetEffect::EffectId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKSetEffect::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKUnInit
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKUnInit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKUnInit) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKUnInit");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKUnInit) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKUnInit");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKUnInit, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKUnInit::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ClearAnimationType
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_ClearAnimationType final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ClearAnimationType) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_ClearAnimationType");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ClearAnimationType) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_ClearAnimationType");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ClearAnimationType, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ClearAnimationType::Device' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_CloseAnimation final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CloseAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CloseAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CloseAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_CloseAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CloseAnimation, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CloseAnimation::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CloseAnimationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CloseAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CloseAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CloseAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CloseAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CloseAnimationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CloseAnimationName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeys final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeys, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeys::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeys, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeys::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeys, FrameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeys::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeysName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysName, FrameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAnimation
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAnimation final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetAnimationName;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAnimation) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAnimation) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CopyAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimation, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAnimation::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimation, TargetAnimationName) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyAnimation::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAnimationName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAnimationName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAnimationName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimationName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAnimationName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimationName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyAnimationName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeyColor
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeyColor final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeyColor) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, FrameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, Key) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeyColorName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, FrameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, Key) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColor
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColor final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColor) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, FrameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName, Keys) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColorName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, FrameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, Keys) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys, FrameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName, FrameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysOffset
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, FrameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, Offset) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, FrameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, Offset) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeyColor
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, FrameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, Key) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, FrameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, Key) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColor
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, FrameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName, Keys) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, FrameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, Keys) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys, FrameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName, FrameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyZeroTargetAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateColors1D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateColors1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateColors1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateColors1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateColors1D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateColors1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateColors1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors1D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateColors1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateColors2D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateColors2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateColors2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateColors2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateColors2D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateColors2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateColors2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors2D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateColors2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColors1D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColors1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColors1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColors1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColors1D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColors1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors1D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColors2D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColors2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColors2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColors2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColors2D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColors2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors2D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColorsBlackAndWhite1D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColorsBlackAndWhite2D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFirstFrame
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFirstFrame final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFirstFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFirstFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrame::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame, FrameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrame::FrameCount' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFirstFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFirstFrameName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFirstFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFirstFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrameName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName, FrameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrameName::FrameCount' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFrames::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateMirrorFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateMirrorFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateMirrorFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateMirrorFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateMirrorFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateMirrorFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateMirrorFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateMirrorFrames::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateMirrorFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeEndFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeEndFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeEndFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeEndFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeEndFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FadeEndFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeEndFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFrames, Fade) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FadeEndFrames::Fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeEndFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeEndFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeEndFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeEndFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeEndFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FadeEndFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeEndFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFramesName, Fade) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FadeEndFramesName::Fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeStartFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeStartFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeStartFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeStartFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeStartFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FadeStartFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeStartFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFrames, Fade) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FadeStartFrames::Fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeStartFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeStartFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fade;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeStartFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeStartFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeStartFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FadeStartFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeStartFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFramesName, Fade) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FadeStartFramesName::Fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColor, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColor::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColor, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFrames, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesName, ColorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, Red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, Green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColor, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColor::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColor, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName, ColorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, Red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, Green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColors
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColors final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColors) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColors");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColors) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColors");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColors, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColors::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColors, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillRandomColors::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhite
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames, Threshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName, Threshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, Threshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, Threshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsMinMaxAllFramesRGB
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinThreshold;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRed;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinGreen;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinBlue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxThreshold;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRed;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGreen;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBlue;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MinThreshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MinThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MinRed) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MinRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MinGreen) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MinGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MinBlue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MinBlue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MaxThreshold) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MaxThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MaxRed) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MaxRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MaxGreen) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MaxGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, MaxBlue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::MaxBlue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsMinMaxAllFramesRGBName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinThreshold;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRed;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinGreen;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinBlue;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxThreshold;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRed;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGreen;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBlue;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MinThreshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MinThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MinRed) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MinRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MinGreen) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MinGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MinBlue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MinBlue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MaxThreshold) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MaxThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MaxRed) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MaxRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MaxGreen) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MaxGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, MaxBlue) == 0x00002C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::MaxBlue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsRGB
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, Threshold) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, Red) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, Green) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, blue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsRGBName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, Threshold) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, Red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, Green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdRGBColorsAllFramesRGB
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedThreshold;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreenThreshold;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blueThreshold;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, RedThreshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::RedThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, GreenThreshold) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::GreenThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, blueThreshold) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::blueThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdRGBColorsAllFramesRGBName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedThreshold;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreenThreshold;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blueThreshold;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, RedThreshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::RedThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, GreenThreshold) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::GreenThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, blueThreshold) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::blueThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, Red) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, Green) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, blue) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColor, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColor::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColor, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillZeroColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName, ColorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, Red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, Green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimation
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimation final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimation) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimation) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimation, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimation, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetAnimation::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationCount
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationCount) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationCount");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationCount) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationCount");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationCount, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationCount::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationId
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationId final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationId) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationId");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationId) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationId");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationId, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationId::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationId, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetAnimationId::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationIdByIndex
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationIdByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationIdByIndex");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationIdByIndex");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex, Index_0) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationIdByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetAnimationIdByIndex::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationName final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationName, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationName::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationName, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetAnimationName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetBGRInt
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetBGRInt final
{
public:
	int32                                         Red;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetBGRInt) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetBGRInt");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetBGRInt) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_GetBGRInt");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetBGRInt, Red) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetBGRInt::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetBGRInt, Green) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetBGRInt::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetBGRInt, blue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetBGRInt::blue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetBGRInt, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_GetBGRInt::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetCurrentFrame
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetCurrentFrame final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetCurrentFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetCurrentFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetCurrentFrame) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetCurrentFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetCurrentFrame, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetCurrentFrame::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetCurrentFrame, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetCurrentFrame::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetCurrentFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetCurrentFrameName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetCurrentFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetCurrentFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetCurrentFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetCurrentFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetCurrentFrameName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetCurrentFrameName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetCurrentFrameName, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetCurrentFrameName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameCount
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetFrameCount final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetFrameCount) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetFrameCount");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetFrameCount) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetFrameCount");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCount, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetFrameCount::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCount, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetFrameCount::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameCountName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetFrameCountName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetFrameCountName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetFrameCountName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetFrameCountName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetFrameCountName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCountName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetFrameCountName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCountName, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetFrameCountName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameDuration
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_GetFrameDuration final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetFrameDuration) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetFrameDuration");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetFrameDuration) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_GetFrameDuration");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameDuration, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetFrameDuration::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameDuration, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetFrameDuration::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameDuration, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetFrameDuration::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameDurationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetFrameDurationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetFrameDurationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetFrameDurationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetFrameDurationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetFrameDurationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameDurationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetFrameDurationName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameDurationName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetFrameDurationName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameDurationName, ReturnValue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_GetFrameDurationName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardKeyColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyboardKeyColor final
{
public:
	EChromaSDKKeyboardKey                         Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyboardKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyboardKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardKeyColor::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardKeyColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardRazerKey
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyboardRazerKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyboardRazerKey");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyboardRazerKey");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardRazerKey::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey, ReturnValue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardRazerKey::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardRzKey
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyboardRzKey final
{
public:
	EChromaSDKKeyboardKey                         Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyboardRzKey) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyboardRzKey");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyboardRzKey) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyboardRzKey");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardRzKey, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardRzKey::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardRzKey, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardRzKey::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyColor
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyColor) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, FrameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, Key) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, Key) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxColumn
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMaxColumn final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMaxColumn) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMaxColumn");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMaxColumn) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetMaxColumn");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxColumn, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMaxColumn::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxColumn, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetMaxColumn::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxLeds
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMaxLeds final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMaxLeds) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMaxLeds");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMaxLeds) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetMaxLeds");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxLeds, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMaxLeds::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxLeds, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetMaxLeds::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxRow
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMaxRow final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMaxRow) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMaxRow");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMaxRow) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetMaxRow");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxRow, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMaxRow::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxRow, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetMaxRow::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMouseLedColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMouseLedColor final
{
public:
	EChromaSDKMouseLed                            Led;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMouseLedColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMouseLedColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMouseLedColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetMouseLedColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMouseLedColor, Led) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMouseLedColor::Led' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMouseLedColor, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetMouseLedColor::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMouseLedColor, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetMouseLedColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetPlayingAnimationCount
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetPlayingAnimationCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetPlayingAnimationCount) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetPlayingAnimationCount");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetPlayingAnimationCount) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_GetPlayingAnimationCount");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetPlayingAnimationCount, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetPlayingAnimationCount::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetPlayingAnimationId
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetPlayingAnimationId final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetPlayingAnimationId");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetPlayingAnimationId");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId, Index_0) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetPlayingAnimationId::Index_0' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetPlayingAnimationId::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetRGB
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_GetRGB final
{
public:
	int32                                         Red;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetRGB) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_GetRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, Red) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, Green) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, blue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetRGB::blue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_GetRGB::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetTotalDuration
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetTotalDuration final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetTotalDuration) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetTotalDuration");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetTotalDuration) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetTotalDuration");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetTotalDuration, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetTotalDuration::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetTotalDuration, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetTotalDuration::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetTotalDurationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetTotalDurationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetTotalDurationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetTotalDurationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetTotalDurationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetTotalDurationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetTotalDurationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetTotalDurationName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetTotalDurationName, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetTotalDurationName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertDelay
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertDelay final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertDelay) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertDelay");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertDelay) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_InsertDelay");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelay, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertDelay::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelay, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_InsertDelay::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelay, Delay) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_InsertDelay::Delay' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertDelayName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertDelayName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertDelayName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertDelayName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertDelayName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_InsertDelayName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelayName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertDelayName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelayName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_InsertDelayName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelayName, Delay) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_InsertDelayName::Delay' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertFrame
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertFrame final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceFrame;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetFrame;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertFrame) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_InsertFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrame, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertFrame::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrame, SourceFrame) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_InsertFrame::SourceFrame' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrame, TargetFrame) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_InsertFrame::TargetFrame' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertFrameName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceFrame;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetFrame;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_InsertFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrameName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertFrameName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrameName, SourceFrame) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_InsertFrameName::SourceFrame' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrameName, TargetFrame) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_InsertFrameName::TargetFrame' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InvertColorsAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_InvertColorsAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InvertColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_InvertColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InvertColorsAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_InvertColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InvertColorsAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InvertColorsAllFrames::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InvertColorsAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_InvertColorsAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InvertColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_InvertColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InvertColorsAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_InvertColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InvertColorsAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InvertColorsAllFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsActive
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsActive) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_IsActive");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsActive) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_IsActive");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsActive, Active) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsActive::Active' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsActive, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_IsActive::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationPlaying
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsAnimationPlaying final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsAnimationPlaying) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_IsAnimationPlaying");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsAnimationPlaying) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_IsAnimationPlaying");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationPlaying, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsAnimationPlaying::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationPlaying, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_IsAnimationPlaying::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationPlayingName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsAnimationPlayingName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsAnimationPlayingName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_IsAnimationPlayingName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsAnimationPlayingName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_IsAnimationPlayingName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationPlayingName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsAnimationPlayingName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationPlayingName, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_IsAnimationPlayingName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationTypePlaying
// 0x0002 (0x0002 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsAnimationTypePlaying final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_IsAnimationTypePlaying");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying) == 0x000002, "Wrong size on ChromaSDKPluginBPLibrary_IsAnimationTypePlaying");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsAnimationTypePlaying::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying, ReturnValue) == 0x000001, "Member 'ChromaSDKPluginBPLibrary_IsAnimationTypePlaying::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsConnected
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_IsConnected final
{
public:
	struct FChromaSDKDeviceInfoType               DeviceInfoType;                                    // 0x0000(0x0008)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsConnected) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_IsConnected");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsConnected) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_IsConnected");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsConnected, DeviceInfoType) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsConnected::DeviceInfoType' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsConnected, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_IsConnected::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsInitialized) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_IsInitialized");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsInitialized) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_IsInitialized");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsInitialized, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsInitialized::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsPlatformWindows
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsPlatformWindows final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsPlatformWindows) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_IsPlatformWindows");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsPlatformWindows) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_IsPlatformWindows");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsPlatformWindows, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsPlatformWindows::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.Lerp
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_Lerp final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amt;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_Lerp) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_Lerp");
static_assert(sizeof(ChromaSDKPluginBPLibrary_Lerp) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_Lerp");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, Start) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_Lerp::Start' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, End) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_Lerp::End' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, Amt) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_Lerp::Amt' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_Lerp::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LerpColor
// 0x0034 (0x0034 - 0x0000)
struct ChromaSDKPluginBPLibrary_LerpColor final
{
public:
	struct FLinearColor                           ColorParam1;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LerpColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_LerpColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LerpColor) == 0x000034, "Wrong size on ChromaSDKPluginBPLibrary_LerpColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, ColorParam1) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LerpColor::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, ColorParam2) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_LerpColor::ColorParam2' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, T) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_LerpColor::T' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, ReturnValue) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_LerpColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LerpColorBGR
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_LerpColorBGR final
{
public:
	int32                                         From;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         To;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LerpColorBGR) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_LerpColorBGR");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LerpColorBGR) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_LerpColorBGR");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, From) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::From' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, To) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::To' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, T) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::T' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LoadAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_LoadAnimation final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LoadAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_LoadAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LoadAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_LoadAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LoadAnimation, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LoadAnimation::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LoadAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_LoadAnimationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LoadAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_LoadAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LoadAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_LoadAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LoadAnimationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LoadAnimationName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFrames
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFrames) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, FrameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, ColorParam) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, FrameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandom
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandom final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandom");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandom");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandom::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom, FrameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandom::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandom::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomBlackAndWhite
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite, FrameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomBlackAndWhiteName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName, FrameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName, FrameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRGB
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, FrameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, Red) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, Green) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, blue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRGBName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, FrameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::FrameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, Red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, Green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyColorLerpAllFrames
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam1;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames, ColorParam1) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames, ColorParam2) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames::ColorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyColorLerpAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam1;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName, ColorParam1) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName, ColorParam2) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName::ColorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensity
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensity final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensity) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensity");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensity) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensity");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensity, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensity::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensity, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensity::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensity, Intensity) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensity::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames, Intensity) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName, Intensity) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, Red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, Green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColor::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName, ColorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityName, Intensity) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityName::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyNonZeroTargetColorLerpAllFrames
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam1;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames, ColorParam1) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames, ColorParam2) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames::ColorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyNonZeroTargetColorLerpAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam1;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName, ColorParam1) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName, ColorParam2) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName::ColorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyTargetColorLerpAllFrames
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam1;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames, ColorParam1) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames, ColorParam2) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames::ColorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyTargetColorLerpAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam1;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam2;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName, ColorParam1) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName::ColorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName, ColorParam2) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName::ColorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColors
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColors final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColors) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColors");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColors) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColors");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsAllFrames
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColorsAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, Red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, Green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColorsName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColorsName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColorsName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColorsName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColorsName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColors
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColors final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColors");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColors");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, Red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, Green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsAllFrames
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, Red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, Green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, Red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, Green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, Red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, Green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OpenAnimationFromMemory
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_OpenAnimationFromMemory final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AnimationName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OpenAnimationFromMemory) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OpenAnimationFromMemory");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OpenAnimationFromMemory) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_OpenAnimationFromMemory");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OpenAnimationFromMemory, Data) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OpenAnimationFromMemory::Data' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OpenAnimationFromMemory, AnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OpenAnimationFromMemory::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OpenAnimationFromMemory, ReturnValue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_OpenAnimationFromMemory::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OverrideFrameDuration
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_OverrideFrameDuration final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OverrideFrameDuration) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OverrideFrameDuration");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OverrideFrameDuration) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_OverrideFrameDuration");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OverrideFrameDuration, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OverrideFrameDuration::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OverrideFrameDuration, Duration) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OverrideFrameDuration::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OverrideFrameDurationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_OverrideFrameDurationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OverrideFrameDurationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_OverrideFrameDurationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OverrideFrameDurationName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName, Duration) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OverrideFrameDurationName::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimation final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimation) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimation, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimation::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimation, Loop) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_PlayAnimation::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimationComposite
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimationComposite final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimationComposite) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimationComposite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimationComposite) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimationComposite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationComposite, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationComposite::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationComposite, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationComposite::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationName, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationName::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimations
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimations final
{
public:
	TArray<class FString>                         AnimationNames;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimations) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimations");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimations) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimations");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimations, AnimationNames) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimations::AnimationNames' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimations, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimations::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PreviewFrame
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_PreviewFrame final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PreviewFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_PreviewFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PreviewFrame) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_PreviewFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrame, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PreviewFrame::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrame, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_PreviewFrame::FrameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrame, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_PreviewFrame::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PreviewFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PreviewFrameName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PreviewFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PreviewFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PreviewFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PreviewFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrameName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PreviewFrameName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrameName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PreviewFrameName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReduceFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReduceFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         N;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReduceFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ReduceFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReduceFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_ReduceFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReduceFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFrames, N) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ReduceFrames::N' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReduceFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReduceFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         N;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReduceFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ReduceFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReduceFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_ReduceFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReduceFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFramesName, N) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ReduceFramesName::N' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReverseAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReverseAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReverseAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ReverseAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReverseAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_ReverseAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReverseAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReverseAllFrames::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReverseAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReverseAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReverseAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ReverseAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReverseAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_ReverseAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReverseAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReverseAllFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetChromaCustomColorAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetChromaCustomFlagName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetChromaCustomFlagName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetChromaCustomFlagName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetChromaCustomFlagName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetChromaCustomFlagName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName, Flag) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetChromaCustomFlagName::Flag' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetCurrentFrame
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetCurrentFrame final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetCurrentFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetCurrentFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetCurrentFrame) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_SetCurrentFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetCurrentFrame, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetCurrentFrame::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetCurrentFrame, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetCurrentFrame::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetCurrentFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetCurrentFrameName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetCurrentFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetCurrentFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetCurrentFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetCurrentFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetCurrentFrameName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetCurrentFrameName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetCurrentFrameName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetCurrentFrameName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetEventName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetEventName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetEventName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetEventName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetEventName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetEventName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetEventName, Name_0) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetEventName::Name_0' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetEventName, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetEventName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetIdleAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetIdleAnimationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetIdleAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetIdleAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetIdleAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_SetIdleAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetIdleAnimationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetIdleAnimationName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyboardKeyColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyboardKeyColor final
{
public:
	EChromaSDKKeyboardKey                         Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyboardKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyboardKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyboardKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyboardKeyColor::ColorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor, Colors) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyboardKeyColor::Colors' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColor
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColor) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, FrameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, Key) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, ColorParam) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames, Key) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFrames::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorAllFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName, Key) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, Key) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColor
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, FrameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, Key) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, ColorParam) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames, Key) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames, ColorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorAllFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName, Key) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName, ColorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, Key) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyRowColumnColorName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName, Row) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName::Row' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName, Column) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName::Column' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName, ColorParam) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_SetKeyRowColumnColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, FrameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFrames
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFrames::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName, ColorParam) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesRGB
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, Red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, Green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesRGBName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, Red) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, Green) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, blue) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, Keys) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, ColorParam) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorRGB
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorRGB final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorRGB) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorRGB) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, FrameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, Red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, Green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorRGBName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorRGBName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Red;                                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Green;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, Keys) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, Red) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::Red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, Green) == 0x00002C, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::Green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, blue) == 0x000030, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColor final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, FrameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorAllFrames
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames, ColorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName, ColorParam) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, FrameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::FrameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, Keys) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, ColorParam) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::ColorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetMouseLedColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetMouseLedColor final
{
public:
	EChromaSDKMouseLed                            Led;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetMouseLedColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetMouseLedColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetMouseLedColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetMouseLedColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetMouseLedColor, Led) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetMouseLedColor::Led' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetMouseLedColor, ColorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetMouseLedColor::ColorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetMouseLedColor, Colors) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetMouseLedColor::Colors' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetStaticColor
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetStaticColor final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetStaticColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetStaticColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetStaticColor) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_SetStaticColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetStaticColor, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetStaticColor::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetStaticColor, Color) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetStaticColor::Color' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetStaticColorAll
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetStaticColorAll final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetStaticColorAll) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetStaticColorAll");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetStaticColorAll) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_SetStaticColorAll");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetStaticColorAll, Color) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetStaticColorAll::Color' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimation final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimation, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimation::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationComposite
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimationComposite final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimationComposite) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimationComposite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimationComposite) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimationComposite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimationComposite, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimationComposite::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimationName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimations
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimations final
{
public:
	TArray<class FString>                         AnimationNames;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimations) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimations");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimations) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimations");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimations, AnimationNames) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimations::AnimationNames' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationType
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimationType final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimationType) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimationType");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimationType) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimationType");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimationType, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimationType::Device' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamBroadcast
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamBroadcast final
{
public:
	class FString                                 StreamId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreamKey;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamBroadcast) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamBroadcast");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamBroadcast) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_StreamBroadcast");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamBroadcast, StreamId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamBroadcast::StreamId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamBroadcast, StreamKey) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamBroadcast::StreamKey' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetAuthShortcode
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamGetAuthShortcode final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamGetAuthShortcode) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamGetAuthShortcode");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamGetAuthShortcode) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_StreamGetAuthShortcode");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetAuthShortcode, Platform) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamGetAuthShortcode::Platform' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetAuthShortcode, Title) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamGetAuthShortcode::Title' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetAuthShortcode, ReturnValue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_StreamGetAuthShortcode::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetFocus
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamGetFocus final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamGetFocus) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamGetFocus");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamGetFocus) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StreamGetFocus");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetFocus, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamGetFocus::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetId
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamGetId final
{
public:
	class FString                                 Shortcode;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamGetId) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamGetId");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamGetId) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_StreamGetId");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetId, Shortcode) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamGetId::Shortcode' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetId, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamGetId::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetKey
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamGetKey final
{
public:
	class FString                                 Shortcode;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamGetKey) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamGetKey");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamGetKey) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_StreamGetKey");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetKey, Shortcode) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamGetKey::Shortcode' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetKey, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamGetKey::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetStatus
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamGetStatus final
{
public:
	EChromaSDKStreamStatusEnum                    ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamGetStatus) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamGetStatus");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamGetStatus) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_StreamGetStatus");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetStatus, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamGetStatus::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamGetStatusString
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamGetStatusString final
{
public:
	EChromaSDKStreamStatusEnum                    Status;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamGetStatusString) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamGetStatusString");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamGetStatusString) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_StreamGetStatusString");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetStatusString, Status) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamGetStatusString::Status' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamGetStatusString, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_StreamGetStatusString::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamReleaseShortcode
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamReleaseShortcode final
{
public:
	class FString                                 Shortcode;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamReleaseShortcode) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamReleaseShortcode");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamReleaseShortcode) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_StreamReleaseShortcode");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamReleaseShortcode, Shortcode) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamReleaseShortcode::Shortcode' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamReleaseShortcode, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamReleaseShortcode::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamSetFocus
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamSetFocus final
{
public:
	class FString                                 StreamFocus;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamSetFocus) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamSetFocus");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamSetFocus) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_StreamSetFocus");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamSetFocus, StreamFocus) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamSetFocus::StreamFocus' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamSetFocus, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamSetFocus::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StreamWatch
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_StreamWatch final
{
public:
	class FString                                 StreamId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StreamWatch) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StreamWatch");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StreamWatch) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_StreamWatch");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamWatch, StreamId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StreamWatch::StreamId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StreamWatch, Timestamp) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_StreamWatch::Timestamp' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys, FrameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName, FrameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames::TargetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName::TargetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset final
{
public:
	int32                                         SourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset, SourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset::SourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset, TargetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset::TargetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName final
{
public:
	class FString                                 SourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName, SourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName::SourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName, TargetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName::TargetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SupportsStreaming
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_SupportsStreaming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SupportsStreaming) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_SupportsStreaming");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SupportsStreaming) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_SupportsStreaming");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SupportsStreaming, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SupportsStreaming::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ToBGR
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ToBGR final
{
public:
	struct FLinearColor                           ColorParam;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ToBGR) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ToBGR");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ToBGR) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ToBGR");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToBGR, ColorParam) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ToBGR::ColorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToBGR, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ToBGR::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ToLinearColor
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ToLinearColor final
{
public:
	int32                                         ColorParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ToLinearColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ToLinearColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ToLinearColor) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ToLinearColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToLinearColor, ColorParam) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ToLinearColor::ColorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToLinearColor, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ToLinearColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimEndFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimEndFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastFrameId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimEndFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimEndFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimEndFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_TrimEndFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimEndFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFrames, LastFrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_TrimEndFrames::LastFrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimEndFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimEndFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastFrameId;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimEndFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimEndFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimEndFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_TrimEndFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimEndFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFramesName, LastFrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_TrimEndFramesName::LastFrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimFrame
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimFrame final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimFrame) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_TrimFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrame, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimFrame::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrame, FrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_TrimFrame::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimFrameName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_TrimFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrameName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimFrameName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrameName, FrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_TrimFrameName::FrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimStartFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimStartFrames final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfFrames;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimStartFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimStartFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimStartFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_TrimStartFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFrames, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimStartFrames::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFrames, NumberOfFrames) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_TrimStartFrames::NumberOfFrames' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimStartFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimStartFramesName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfFrames;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimStartFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimStartFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimStartFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_TrimStartFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFramesName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimStartFramesName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFramesName, NumberOfFrames) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_TrimStartFramesName::NumberOfFrames' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UnloadAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_UnloadAnimation final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UnloadAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_UnloadAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UnloadAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_UnloadAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UnloadAnimation, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UnloadAnimation::AnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UnloadAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_UnloadAnimationName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UnloadAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_UnloadAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UnloadAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_UnloadAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UnloadAnimationName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UnloadAnimationName::AnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UseForwardChromaEvents
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_UseForwardChromaEvents final
{
public:
	bool                                          Toggle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UseForwardChromaEvents) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_UseForwardChromaEvents");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UseForwardChromaEvents) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_UseForwardChromaEvents");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UseForwardChromaEvents, Toggle) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UseForwardChromaEvents::Toggle' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UseIdleAnimation
// 0x0002 (0x0002 - 0x0000)
struct ChromaSDKPluginBPLibrary_UseIdleAnimation final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UseIdleAnimation) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_UseIdleAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UseIdleAnimation) == 0x000002, "Wrong size on ChromaSDKPluginBPLibrary_UseIdleAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UseIdleAnimation, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UseIdleAnimation::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UseIdleAnimation, Flag) == 0x000001, "Member 'ChromaSDKPluginBPLibrary_UseIdleAnimation::Flag' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UseIdleAnimations
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_UseIdleAnimations final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UseIdleAnimations) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_UseIdleAnimations");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UseIdleAnimations) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_UseIdleAnimations");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UseIdleAnimations, Flag) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UseIdleAnimations::Flag' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UsePreloading
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_UsePreloading final
{
public:
	int32                                         AnimationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UsePreloading) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_UsePreloading");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UsePreloading) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_UsePreloading");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UsePreloading, AnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UsePreloading::AnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UsePreloading, Flag) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_UsePreloading::Flag' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UsePreloadingName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_UsePreloadingName final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UsePreloadingName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_UsePreloadingName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UsePreloadingName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_UsePreloadingName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UsePreloadingName, AnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UsePreloadingName::AnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UsePreloadingName, Flag) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_UsePreloadingName::Flag' has a wrong offset!");

}

